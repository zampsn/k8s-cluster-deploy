name: Setup Cluster Ingress

on:
  workflow_dispatch:
    inputs:
      apply:
        type: boolean
        description: Whether to apply the changes
        required: false
        default: false
      domain:
        type: string
        description: The Cloudflare domain to create
        required: true
        default: zachsampson.dev
      cluster-name:
        type: string
        description: The name of the K8s cluster to setup ingress for
        required: true
        default: main

  workflow_call:
    inputs:
      apply:
        type: boolean
        description: Whether to apply the changes
        required: false
        default: false
      domain:
        type: string
        description: The Cloudflare domain to create
        required: true
      cluster-name:
        type: string
        description: The name of the K8s cluster to setup ingress for
        required: true

jobs:
  ingress-nginx:
    concurrency: ${{ github.repository }}-${{ inputs.cluster-name }}-ingress
    runs-on: ubuntu-latest
    name: Create Nginx ingress controller
    outputs:
      external-ip: ${{ steps.loadbalancer.outputs.external-ip || '0.0.0.0' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/kubeconfig
        with:
          cluster-name: ${{ inputs.cluster-name }}
          digitalocean-token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Dry run Nginx ingress controller
        if: ${{ !inputs.apply }}
        run: |
          helm install --dry-run ingress-nginx ingress-nginx \
            --repo https://kubernetes.github.io/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --set controller.replicaCount=2 \
            --set fullnameOverride=nginx-ingress

      - name: Deploy Nginx ingress controller
        if: ${{ inputs.apply }}
        run: |
          helm upgrade --install ingress-nginx ingress-nginx \
            --repo https://kubernetes.github.io/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --set controller.replicaCount=2 \
            --set fullnameOverride=nginx-ingress \
            --wait

      - name: Get load balancer IP
        if: ${{ inputs.apply }}
        id: loadbalancer
        run: |
          attempt=0
          while [ $attempt -lt 100 ]; do
            externalIP=$(kubectl get svc -n ingress-nginx nginx-ingress-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$externalIP" ]; then
              echo "external-ip=$externalIP" >> $GITHUB_OUTPUT
              break
            else
              sleep 10
            fi
            attempt=$((attempt+1))
          done
          
          if [ -z "$externalIP" ]; then
            echo "::error::Timed out waiting for load balancer IP"
            exit 1
          fi

  create-cloudflare-dns:
    concurrency: ${{ github.repository }}-${{ inputs.cluster-name }}-ingress
    runs-on: ubuntu-latest
    needs: ingress-nginx
    name: Create cloudflare DNS record
    defaults:
      run:
        working-directory: ./terraform/cloudflare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_TOKEN }}

      - name: Terraform init
        run: terraform init

      - name: Terraform format and validate
        run: |
          terraform fmt -check
          terraform validate

      - name: Terraform plan
        id: tf-plan
        run: |
          terraform plan -no-color -input=false -out tf_plan.txt \
            -var cloudflare_token=${{ secrets.CLOUDFLARE_TOKEN }} \
            -var cloudflare_domain=${{ inputs.domain }} \
            -var subdomain_name="*.${{ inputs.cluster-name }}-cluster" \
            -var target_ip=${{ needs.ingress-nginx.outputs.external-ip }}
          
          if terraform show -no-color tf_plan.txt | grep -q "No changes."; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Output Plan Summary
        run: |
          echo "# Create Cloudflare DNS" >> $GITHUB_STEP_SUMMARY
          echo "## :book: Terraform Plan" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`${{ steps.tf-plan.outputs.stdout }}\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: cloudflare_tf_plan
          path: ./terraform/cloudflare/tf_plan.txt

      - name: Terraform Apply
        if: ${{ inputs.apply && steps.tf-plan.outputs.has-changes == 'true' }}
        id: tf-apply
        run: |
          terraform apply ./tf_plan.txt

      - name: Output Apply Summary
        if: ${{ inputs.apply && steps.tf-plan.outputs.has-changes == 'true' }}
        run: |
          echo "## :shipit: Terraform Apply" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`${{ steps.tf-apply.outputs.stdout }}\`\`\`" >> $GITHUB_STEP_SUMMARY